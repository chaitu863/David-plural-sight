
LIST: 

trigger LeadTigger on Lead (before insert) {

    set<string> emailcollection = new set<string>();
    for (lead sObjectLead : Trigger.new) {
        if(sObjectLead.email !=null) {
        emailcollection.add(sObjectLead.email);
        }
    }

    list<account> accountsWithSameEmail = [SELECT id, name, email__c
                                          FROM account
                                          WHERE email__c IN : emailcollection
                                          ];
    list<account> accountsupdated = new list<account> ();
    account acc1= new account ();
    if(accountsWithSameEmail.size()>0) {
        for (lead leadrecord : Trigger.new) {
            for (account acc : accountsWithSameEmail) {
                if(leadrecord.email !=null && (leadrecord.email == acc.email__c)) {
                    acc.Name = leadrecord.lastname;
                    acc.email__c = leadrecord.email;
                    break;
                } else {
                    acc1.Name = leadrecord.lastname;
                    acc1.email__c = leadrecord.email;
                    System.debug('acc1 record is '+acc1);
                    accountsupdated.add(acc1);
                    System.debug('accountsupdated inside for loop is '+accountsupdated);
                }
            } 

        }   
    }else if(accountsWithSameEmail.size()== 0) {
        for (lead leadrecord : Trigger.new) {
            if(leadrecord.email !=null) {
                acc1.Name = leadrecord.lastname;
                acc1.email__c = leadrecord.email;
                System.debug('acc1 record is '+acc1);
                accountsupdated.add(acc1);
                System.debug('accountsupdated inside for loop is '+accountsupdated);
            }
        }
    }
        
    
    system.debug('accountsupdated before insert '+accountsupdated);
    insert accountsupdated;
    system.debug('accountsupdated after insert '+accountsupdated);
    update accountsWithSameEmail;
}


MAP:

trigger LeadTigger on Lead (before insert) {

    set<string> emailcollection = new set<string>();
    for (lead sObjectLead : Trigger.new) {
        if(sObjectLead.email !=null) {
        emailcollection.add(sObjectLead.email);
        }
    }

    list<account> accountsWithSameEmail = [SELECT id, name, email__c
                                          FROM account
                                          WHERE email__c IN : emailcollection
                                          ];

    map<string,account> accountmap = new map<string,account>();
    for (account accountre : accountsWithSameEmail) {
        accountmap.put(accountre.email__c, accountre);
    }
    list<account> accountsupdated = new list<account> ();
    account acc1= new account ();
    if(accountmap.size()>0) {
        for (lead leadrecord : Trigger.new) {
            if(leadrecord.email !=null && (leadrecord.email == accountmap.get(leadrecord.email).email__c)) {
                accountmap.get(leadrecord.email).Name = leadrecord.lastname;
                accountmap.get(leadrecord.email).email__c = leadrecord.email;
                    break;
            } else {
                    acc1.Name = leadrecord.lastname;
                    acc1.email__c = leadrecord.email;
                    System.debug('acc1 record is '+acc1);
                    accountsupdated.add(acc1);
                    System.debug('accountsupdated inside for loop is '+accountsupdated);
            }
        }        
    } else if(accountmap.size()== 0) {
        for (lead leadrecord : Trigger.new) {
            if(leadrecord.email !=null) {
                acc1.Name = leadrecord.lastname;
                acc1.email__c = leadrecord.email;
                System.debug('acc1 record is '+acc1);
                accountsupdated.add(acc1);
                System.debug('accountsupdated inside for loop is '+accountsupdated);
            }
        }
    }
        
    system.debug('accountsupdated before insert '+accountsupdated);
    insert accountsupdated;
    system.debug('accountsupdated after insert '+accountsupdated);
    update accountmap.values();
}
