EX1: trigger AccountTrigg on Account (after insert,after update) {
    set<id> accids = new set<id>();
    for(account acc : Trigger.new){
        if(acc.Industry != Trigger.oldmap.get(acc.Id).Industry){
            accids.add(acc.id);
        }
    }
    list<contact> updatecon = new list<contact>();
    for(contact con : [SELECT id,Account.Industry,description from contact where accountid IN :accids]){
        con.description = con.Account.Industry;
        updatecon.add(con);
    }
    update updatecon;
}

EX2:
// while creating if opprtunity stage is closed one, then create a contract for opportunity and account using try catch
// if opportunity is updated with closed lost then then start date is today for all contrcats 
trigger OpportunityTrigg on Opportunity (after insert, after update) {
    
    list<contract> insertcontract = new list<contract>(); 
    if(Trigger.isExecuting && Trigger.isinsert){
        set<id>oppids = new set<id>();
        for(Opportunity opp: Trigger.New) {
            if(opp.StageName == 'Closed Won') {
                insertcontract.add(new Contract(CustomerSignedTitle='Chaitu creted this child',
                                                AccountId = opp.AccountId,Opportunity__c=opp.Id, 
                                                Status ='Draft',StartDate =Date.today(),ContractTerm = 5));
            }
        }
        try{
            insert insertcontract; 
        }catch (Exception ex){
            system.debug('@@@@ message is => '+ex.getMessage());
        }
    }
    
    if(Trigger.isExecuting && Trigger.isupdate) {
      list<contract> conupdate = new list<contract>();
      set<id> oppids = Trigger.Newmap.keyset();
        for(contract con: [select id,Opportunity__r.stageName,CustomerSignedDate,Opportunity__r.CloseDate from contract where Opportunity__c IN : oppids]){
            if(con.Opportunity__r.stageName == 'Closed lost'){
                con.CustomerSignedDate = con.Opportunity__r.CloseDate;
                conupdate.add(con);
            }
        }
        try{
            if(!conupdate.isEmpty()){
                update conupdate; 
            }
        }catch (Exception e){
            system.debug('exception e =>'+e.getMessage());
        }
    }
}

Ex3: trigger CountTask on Task (after insert, after update) {
  
    set<id>taskwhoids = new set<id>();
    for(task taskrecord : Trigger.new) {
        taskwhoids.add(taskrecord.whoid);
    }
    Map<id,contact> contactmap = new map<id,contact>([SELECT ID,name,No_of_Open_Tasks__c,(SELECT Id,Subject,CallType,WhoID From tasks) FROM Contact where ID IN :taskwhoids]);
    list<contact> updatecontact = new list<contact>();
    for(contact singlecontact : contactmap.values()) {
        singlecontact.No_of_Open_Tasks__c=singlecontact.tasks.size
        updatecontact.add(singlecontact);
    }
    update updatecontact;
}

Ex4: trigger Opportunitytrigger on Opportunity (after insert) {

    list<task> taskInsertList= new List<task>();
    for (Opportunity sObjOpprecord : trigger.new ) {
        task t = new task();
        t.Description   ='Send one ASAP';
        t.Subject       ='Apple Watch promo';
        t.WhatId        =sObjOpprecord.Id;
        taskInsertList.add(t);    
    }
    insert taskInsertList;
}

EX 5:trigger accDesupdate on Account (after insert, after update) {

    if(trigger.isupdate || trigger.isafter) {
        system.debug('inside after trigger chaitu');
        set<id> accupdateId = new set<id>();
        for(account acc : trigger.new){
            if(trigger.oldmap.get(acc.id).description != trigger.newmap.get(acc.id).description){
                accupdateId.add(acc.Id);
                system.debug('account id is'+accupdateId);
            }
    }
        list<contact> conupdate = new list<contact>();
        for(contact con : [SELECT id,Account.description from contact where AccountId IN :accupdateId]) {
            system.debug('acc desc is '+con.Account.Description);
            con.Description = con.Account.Description;
            system.debug('con desc is '+con.Description);
            conupdate.add(con);
        }
        update conupdate;
        system.debug('after con update is '+conupdate);
   }
}

EX 6: Another way for ex5
trigger Account_Trigger on Account (after insert,after update) {
   public static boolean recursive = false;
    if(!recursive){
        recursive = true;
        set<id>accid = new set<id>();
        map<id,account> mapofacc = new map<id,account>();
        for(account acc:trigger.new){
            accid.add(acc.id);
            mapofacc.put(acc.id, acc);
        }
        list<contact> listofcontact = new list<contact>();
        for(contact con: [select id,name,accountid from contact where accountid in:accid]){
            if(mapofacc.get(con.accountid) !=null){
                con.Description = mapofacc.get(con.accountid).Description;
                system.debug('update contact is '+con.Description);
                listofcontact.add(con);
            }
        }
        update listofcontact;
     }
}

