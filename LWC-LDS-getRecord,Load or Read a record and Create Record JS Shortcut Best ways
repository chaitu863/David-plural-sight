FIRST APPROCH:

(second approach covered all scenarios)
ON HOME PAGE I PLACED this component.
here i used create record syntax shortcut mainly for fields attribute)and loading record(specially using getfieldvalue method)


<template>
    <lightning-card title="Account Creation">
        <lightning-layout multiple-rows>
            <lightning-layout-item size="12" padding="around-medium">
                <lightning-input label="Name" name="NAME" onchange={changehandler}></lightning-input>
            </lightning-layout-item>
            <lightning-layout-item size="12" padding="around-medium">
                <lightning-input label="Site" name="EM" onchange={changehandler}></lightning-input>
            </lightning-layout-item>
            <lightning-layout-item size="12" padding="around-medium">
                <lightning-input label="Phone" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" name="PH"
                    onchange={changehandler}></lightning-input>
            </lightning-layout-item>
            <lightning-layout-item size="12" padding="around-medium">
                <lightning-button label="Save" variant="brand" onclick={handleclick}></lightning-button>
            </lightning-layout-item>
        </lightning-layout>
    </lightning-card>
    <lightning-card title="View an Account">
        <lightning-layout multiple-rows>
          <lightning-layout-item size="12" padding="around-medium">
            <p><lightning-formatted-text value={retrivedname}></lightning-formatted-text></p>
            <p><lightning-formatted-text value={retrivedemail}></lightning-formatted-text></p> 
            <p><lightning-formatted-phone value={retrivedphone}></lightning-formatted-phone></p> 
          </lightning-layout-item>
        </lightning-layout>
    </lightning-card>
</template>


import { createRecord, getRecord, getFieldValue,getFieldDisplayValue, updateRecord } from 'lightning/uiRecordApi';
import {
    LightningElement,wire
} from 'lwc';
import ACCOUNTOBJ from '@salesforce/schema/Account';
import ACCOUNT_NAME from '@salesforce/schema/Account.Name';
import ACCOUNT_SITE from '@salesforce/schema/Account.Site';
import ACCOUNT_PHONE from '@salesforce/schema/Account.Phone';
export default class ChaituCreateRecord extends LightningElement {

    namejs;
    emailjs;
    phonejs;
    recordId;
    retrivedname;
    retrivedphone;
    retrivedemail;
    @wire(getRecord, {recordId:'$recordId',fields:[ACCOUNT_NAME,ACCOUNT_SITE,ACCOUNT_PHONE]})
    retrivedaccount({ data, error }){
        if(data){
            this.retrivedname = getFieldValue(data,ACCOUNT_NAME);
            this.retrivedemail = getFieldValue(data,ACCOUNT_SITE);
            this.retrivedphone = getFieldValue(data,ACCOUNT_PHONE);
        }else if(error){
            console.log('error messaage is',error.body.message);
        }
    }
    changehandler(event) {
        if (event.target.name === 'NAME') {
            this.namejs = event.target.value;
        }
        if (event.target.name === 'EM') {
            this.emailjs = event.target.value;
        }
        if (event.target.name === 'PH') {
            this.phonejs = event.target.value;
        }
    }

    handleclick(){
        const fields = {[ACCOUNT_NAME.fieldApiName]:this.namejs,[ACCOUNT_SITE.fieldApiName]:this.emailjs,[ACCOUNT_PHONE.fieldApiName]:this.phonejs};
        const recordInput = {apiname :ACCOUNTOBJ.objectApiName,fields};
      createRecord(recordInput)
      .then(
          response =>{
              console.log('response is',response);
              console.log('response in JSON',JSON.stringify(response));
              console.log('record id is',response.id);
              this.recordId = response.id;
          }).catch(error=>{
              console.log('error message is',error.body.message);
          })
    }
}

SECOND APPROACH:

which covers all of it well than first approach.

<template>
    <lightning-card title="LDS Different">
        <lightning-layout multiple-rows>
            <lightning-layout-item size="12" padding="around-medium">
                <lightning-input label="Name" name="NAME" onchange={namehandler}></lightning-input>
            </lightning-layout-item>
            <lightning-layout-item size="12" padding="around-medium">
                <lightning-input label="Phone" name="Phone" type="Phone" onchange={phonehandler}></lightning-input>
            </lightning-layout-item>
            <lightning-layout-item size="12" padding="around-medium">
                <lightning-input label="Url" name="URL" type="url" onchange={urlhandler}></lightning-input>
            </lightning-layout-item>
            <lightning-layout-item size="12" padding="around-medium">
                <lightning-button label="Create Account" name="CA" onclick={createAccountHandler}></lightning-button>
            </lightning-layout-item><br/>
            Name is : {nametopass}<br/>
            Phone is :{phonetopass}<br/>
            Email using get method is : {getaccountemail}<br/>
            email second way is :{emailtopass}<br/>

            
        </lightning-layout>
    </lightning-card>
</template>


import { LightningElement ,wire} from 'lwc';
import { createRecord,getFieldDisplayValue,getRecord, getFieldValue} from 'lightning/uiRecordApi';
import ACCOUNTOBJ from '@salesforce/schema/Account';
import ACCOUNTPHONE from '@salesforce/schema/Account.Phone';
export default class GoatLDS extends LightningElement {

    accountname;
    phonejs;
    urlhandlerjs;
    recordId;
    nametopass;
    phonetopass;
    emailtopass;
    phonetopasstwo;
    @wire(getRecord, { recordId: '$recordId', fields: [ACCOUNTPHONE,'Account.Name','Account.Email__c']})
    wiredRecord({ error, data }) {
        if (data) {
               console.log('inside data'+JSON.stringify(data));
               this.nametopass = getFieldValue(data,'Account.Name');
               this.phonetopass = getFieldValue(data,ACCOUNTPHONE);
               this.emailtopass = data.fields.Email__c.value; 
              
               console.log('name in data is '+this.nametopass );
               console.log('phone in data is '+this.phonetopass );
        } else if (error) {
            console.log('error message is '+error.body.message);
        }
    }

    @wire(getRecord, { recordId: '$recordId', fields: ['Account.Email__c']})
    wiredRecordtwo;
    

    namehandler(event){
        this.accountname = event.target.value;
    }

    phonehandler(event){
        this.phonejs = event.target.value;
    }

    urlhandler(event){
        this.urlhandlerjs = event.target.value;
    }

    createAccountHandler(){

        const fields = {'Name':this.accountname,[ACCOUNTPHONE.fieldApiName]:this.phonejs,'Email__c':this.urlhandlerjs};
        const recordinput = {apiName:ACCOUNTOBJ.objectApiName,fields}; // OR const recordinput = {apiName:'Account',fields};
        createRecord(recordinput).then(Response=>{
           console.log('account id is : '+Response.id);
           this.recordId = Response.id;
        }).catch(error=>{
            console.error('error message is'+ error.body.message);
        });
    }

    get getaccountemail(){
        if(this.wiredRecordtwo.data){
            console.log('inside get method'+this.wiredRecordtwo.data.fields.Email__c);
          return this.wiredRecordtwo.data.fields.Email__c.value;
        }else
        return undefined;
    }
}
