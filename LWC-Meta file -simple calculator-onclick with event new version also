FIRST APPROACH:

<template>
<lightning-card title="Simple Calculator" icon-name="custom:custom14">
<lightning-layout multiple-rows>
              <lightning-layout-item padding="around-small" size="12">
                  <lightning-input type="number" label="FirstNumber" name="firstnumbername" onchange={numberHandler}></lightning-input>
              </lightning-layout-item>
              <lightning-layout-item padding="around-small" size="12">
                  <lightning-input type="number" label="SecondNumber" name="secondnumbername" onchange={numberHandler}></lightning-input>
              </lightning-layout-item>
              <lightning-layout-item padding="around-small" size="12">
                <lightning-button-group>
                    <lightning-button label="ADD"  icon-name ="utility:add" onclick={addclick}></lightning-button>
                    <lightning-button label="SUB" icon-name ="utility:dash"  onclick={subclick}></lightning-button>
                    <lightning-button label="MUL" icon-name ="utility:close" onclick={mulclick}></lightning-button>
                    <lightning-button label="DIV"  icon-name ="utility:magicwand" onclick={divclick}></lightning-button>
                </lightning-button-group>
              </lightning-layout-item>
              <lightning-layout-item padding="around-small" size="12">
                  <p><lightning-formatted-text value={currentResult} ></lightning-formatted-text></p>
              </lightning-layout-item><br/>
              <lightning-layout-item padding="around-small" size="12">
                  <lightning-input type="checkbox" label="Show previous result" name="checkboxname" onchange={checkboxHandler}></lightning-input>
              </lightning-layout-item><br/>
              <lightning-layout-item padding="around-small" size="12">
                <template if:true={isitchecked}>
                 <ul>
                    <template iterator:it = {previousvalues}>
                      <li key={it.value}>
                          <div if:true={it.first} class="slds-border_top"></div>
                          {it.value}
                          <div if:true={it.last} class="slds-border_bottom"></div>
                      </li>
                    </template>
                  </ul>    
                </template>
              </lightning-layout-item>
          </lightning-layout>
</lightning-card>
</template>


import { LightningElement, track } from 'lwc';
export default class HelloWorld extends LightningElement {
@track secondnumberjs
@track firstnumberjs
@track currentResult;
@track previousvalues = [];
@track isitchecked = false;
numberHandler(event){
  const holdname= event.target.name;
  if(holdname === 'firstnumbername'){
    this.firstnumberjs = event.target.value;
  }else if(holdname === 'secondnumbername'){
    this.secondnumberjs = event.target.value;
  }
}

addclick(){
  const Fnum = parseInt(this.firstnumberjs);
  const Snum = parseInt(this.secondnumberjs);
  
  this.currentResult = `Result of ${Fnum} + ${Snum} is ${Fnum +Snum}`;
  this.previousvalues.push(this.currentResult);
}

subclick(){
  const Fnum = parseInt(this.firstnumberjs);
  const Snum = parseInt(this.secondnumberjs);
  this.currentResult = `Result of ${Fnum} - ${Snum} is ${Fnum - Snum}`;
this.previousvalues.push(this.currentResult);
}

mulclick(){
  const Fnum = parseInt(this.firstnumberjs);
  const Snum = parseInt(this.secondnumberjs);
  
  this.currentResult = `Result of ${Fnum} x ${Snum} is ${Fnum * Snum}`;
  this.previousvalues.push(this.currentResult);
}

divclick(){
  const Fnum = parseInt(this.firstnumberjs);
  const Snum = parseInt(this.secondnumberjs);
  
  this.currentResult = `Result of ${Fnum} / ${Snum} is ${Fnum / Snum}`;
  this.previousvalues.push(this.currentResult);
}

checkboxHandler(event){
  this.isitchecked = event.target.checked;
}

}



CONFIGURATION FILE:
<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>48.0</apiVersion>
    <isExposed>true</isExposed>
    <targets>
        <target>lightningCommunity__Page</target>
        <target>lightningCommunity__Default</target>
        <target>lightning__AppPage</target>
        <target>lightning__HomePage</target>
        <target>lightning__RecordPage</target>
    </targets>
</LightningComponentBundle>



<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata" fqn="accountRecordForm">
    <apiVersion>45.0</apiVersion>
    <isExposed>true</isExposed>
    <description> A Generic component to show or edit object records </description>
    <masterLabel> Generic Record Handler </masterLabel>
    <targets>
        <target>lightning__RecordPage</target>
        <target>lightning__AppPage</target>
        <target>lightning__HomePage</target>
        <target>lightningCommunity__Page</target>
        <target>lightningCommunity__Default</target>
    </targets>
    <targetConfigs>
        <targetConfig targets='lightning__AppPage, lightning__HomePage'>
            <property name="objectApiName" type='String' datasource='Account,Contact,Opportunity' default='Account'> </property>
        </targetConfig>
    </targetConfigs>
    
</LightningComponentBundle>

SECOND APPROCH:

<template>
    <lightning-card title="Simple Calculator" icon-name="standard:client">
        <lightning-layout multiple-rows vertical-align="center" horizontal-align="center">
            <lightning-layout-item size="12" padding="around-small">
                <lightning-input type="Number" label="First Name" name="FN" onchange={changehandler}></lightning-input>
            </lightning-layout-item>
            <lightning-layout-item size="12" padding="around-small">
                <lightning-input type="Number" label="Second Number" name="SN" onchange={changehandler}></lightning-input>
            </lightning-layout-item>
            <lightning-layout-item padding="around-small" size="12">
                <lightning-button-group >
                    <lightning-button label="Add" icon-name="utility:add" icon-position="left" onclick={calculationhandler} name="ADD"></lightning-button>
                    <lightning-button label="Sub" icon-name="utility:dash" icon-position="left" onclick={calculationhandler} name="SUB"></lightning-button>
                    <lightning-button label="Mul" icon-name="utility:close" icon-position="left" onclick={calculationhandler} name="MUL"></lightning-button>
                    <lightning-button label="Div" icon-name="utility:magicwand" icon-position="left" onclick={calculationhandler} name="DIV"></lightning-button>
                 </lightning-button-group>
            </lightning-layout-item>
            <lightning-layout-item size="12" padding="around-small">
                 <lightning-formatted-text value={addresult}></lightning-formatted-text>
            </lightning-layout-item>
        </lightning-layout>
    </lightning-card>
</template>


import { LightningElement } from 'lwc';

export default class Peoplelwc extends LightningElement {
   
    secondnumberjs;
    firstnumberjs;
    addresult;
    changehandler(event){
        if(event.target.name==="FN"){
            this.firstnumberjs = event.target.value;
            console.log('first number is',this.firstnumberjs);
        }
        if(event.target.name==="SN"){
            this.secondnumberjs = event.target.value;
            console.log('second number is',this.secondnumberjs);
        }
    }

    calculationhandler(event) {
        console.log('inside calculate handler');
        if(event.target.name==="ADD") {
            console.log('inside calculate handler if condition ADD');
            const fistjs = parseInt(this.firstnumberjs);
            const secondjs = parseInt(this.secondnumberjs);
            this.addresult = `Addition of ${fistjs} and ${secondjs} is ${fistjs+secondjs}`;
            console.log('add result finaaly is',this.addresult);
        }
        if(event.target.name==="SUB") {
            console.log('inside calculate handler if condition SUB');
            const fistjs = parseInt(this.firstnumberjs);
            const secondjs = parseInt(this.secondnumberjs);
            this.addresult = `Sub of ${fistjs} and ${secondjs} is ${fistjs-secondjs}`;
            console.log('add result finaaly is',this.addresult);
        }
    }
}

THIRD APPROACH:

<template>
    <lightning-card title="Simple Calculator">
       <lightning-layout multiple-rows>
        <lightning-layout-item size="12" padding="around-medium">
            <lightning-input label ="First Number" name="FN" type="number" onchange={inputeventhandler}></lightning-input>
        </lightning-layout-item>
        <lightning-layout-item size="12" padding="around-medium">
            <lightning-input label ="Second Number" name="SN" type="number" onchange={inputeventhandler}></lightning-input>
        </lightning-layout-item>
        <lightning-layout-item size="12" padding="around-medium">
            <lightning-button-group>
                <lightning-button name ="addname" label="ADD" icon-name="utility:add" icon-position="right" onclick={buttoneventhandler}></lightning-button>
                <lightning-button name ="subname" label="SUB" icon-name="utility:dash" icon-position="right" onclick={buttoneventhandler}></lightning-button>
                <lightning-button name ="mulname" label="MUL" icon-name="utility:close" icon-position="right" onclick={buttoneventhandler}></lightning-button>
                <lightning-button name ="divname" label="DIV" icon-name="utility:magicwand" icon-position="right" onclick={buttoneventhandler}></lightning-button>
            </lightning-button-group>
        </lightning-layout-item>
        <lightning-layout-item size="12" padding="around-medium">
            <lightning-formatted-text value={currentResult}></lightning-formatted-text>
        </lightning-layout-item>
       </lightning-layout>
    </lightning-card>
</template>

import { LightningElement } from 'lwc';

export default class ElephantOne extends LightningElement {

    jsfirstnumber;
    jssecondnumber;
    currentResult;
    inputeventhandler(event){
        const jsinputname = event.target.name;
        if(jsinputname === 'FN'){
            this.jsfirstnumber = parseInt(event.target.value);
        }
        if(jsinputname === 'SN'){
            this.jssecondnumber = parseInt(event.target.value);
            
        }
    }

    buttoneventhandler(event){
      const jsbuttonName = event.target.name;
      if(jsbuttonName === 'addname') {
          this.currentResult = `Result of ${this.jsfirstnumber} + ${ this.jssecondnumber} is ${this.jsfirstnumber +this.jssecondnumber}`;
      }
      if(jsbuttonName ==='subname') {
        this.currentResult = `Result of ${this.jsfirstnumber} - ${ this.jssecondnumber} is ${this.jsfirstnumber -this.jssecondnumber}`;
      }
      if(jsbuttonName ==='mulname') {
        this.currentResult = `Result of ${this.jsfirstnumber} * ${ this.jssecondnumber} is ${this.jsfirstnumber * this.jssecondnumber}`;
    }
      if(jsbuttonName ==='divname') {
        this.currentResult = `Result of ${this.jsfirstnumber}/ ${ this.jssecondnumber} is ${this.jsfirstnumber/this.jssecondnumber}`;
    }
    }
}
