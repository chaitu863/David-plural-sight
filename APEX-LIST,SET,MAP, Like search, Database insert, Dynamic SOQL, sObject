Eexcute ananomus window:

string a1 = 'Maha';
string a2 = 'Meghana';
system.debug('a1 is'+a1+'a2 is'+a2);

Account acc = new account();
system.debug('acc is'+acc); // empty


account acc = new account();
acc.Name = 'chaitanya acc';
acc.Phone='816-908-6593';
system.debug('acc is '+acc);

account acc2 = new account(name='chaitanya 2',phone='435464567'); // its sObject constuctor so it is a collection of different data types 
                                                                  // its same as string a1 = 'chaitanta' here insted of chaitanya we have 
                                                                  // new account(name='chaitanya 2',phone='435464567')

system.debug('acc 2 is'+acc2);


list<account> acclist = new list<account>();
system.debug('acc list empty is'+acclist); // Empty ()

list<string> stringlist = new list<string>();
// Add method allowed only one parameter and it allow sObject variable or directly value
stringlist.add(a1); 
stringlist.add(a2);
stringlist.add('third value');
system.debug('total string values are'+stringlist); // (chaitanya, Poornima, third value)

list<string> stringlistwo = new list<string>(stringlist); //constructor allow list type variable only and only single parameter
system.debug('second list'+stringlistwo);          // (chaitanya, Poornima, third value)


/*list<string> stringchaitu = new list<string>(a1); // Passing string variable
system.debug('string test '+stringchaitu); // Error : Because a1 is not a list variable, we should pass only list variable into constructor
                                           // that too constructor allow single parameter

list<string> stringlistwo = new list<string>(stringchaitu,stringlist); //we should not pass two list varibales in constructor
system.debug('second list'+stringlistwo);          // Error */


list<string> stringlisthree = new list<string>{};
system.debug('third list'+stringlisthree);  // Empty

list<string> stringtest = new list<string>{a1}; // if you want to pass primitive values use {} and should not list type
system.debug('string test '+stringtest);

/*list<string> stringwithlist = new list<string>{stringtest}; // {} dont allow collection types, it only allow primitive types
system.debug('string test '+stringwithlist); // Error*/

list<string> stringtest = new list<string>{a1,a2}; // if you want to pass multiple values those should not be list type, rather primitive  
system.debug('string test '+stringtest);

list<string> stringlistfour = new list<string>{'red','orange','yellow'}; //not only variables but also values can be pass directly into {} braces
system.debug('fourth list'+stringlistfour);  // (red, orange, yellow)


list<account> acclist = new list<account>();
account acc3 = new account(name='chaitanya 2',phone='435464567'); 
account acc4 = new account(name='chaitanya 3',phone='567888888'); 
account acc5 = new account(name='chaitanya 5',phone='567888888'); 
acclist.add(acc3); // add method allow only one variable parameter
acclist.add(new account(name='chaitanya 3',phone='567888888'));
system.debug('total accouts'+acclist);

list<account> acclisttwo = new list<account>(acclist); ////constructor allow list type variable only and only single parameter
system.debug('second list'+acclisttwo);

/*list<account> acclisttwo = new list<account>(new account(name='chaitanya 22',phone='435464567')); 
                             // we should pass only list variable not sObject record into constructor 
system.debug('second list'+acclisttwo); // Error*/


list<account> acclisttwo = new list<account>{new account(name='chaitanya 22',phone='435464567')}; 
system.debug('second list'+acclisttwo); 


list<account> acclisthreee = new list<account>{new account(name='chaitanya 22',phone='435464567'),
                                               new account(name='chaitanya 34',phone='435464567')}; 
system.debug('thirdlist list'+acclisthreee); 


Copy vs Clone:


Account accCon = new account(name='chaitutwo');
system.debug('acccon is'+accCon); // acccon isAccount:{Name=chaitutwo}

//Copy single record from one to another variable
Account acc2 = accCon;
system.debug('acc2 is '+acc2); //acc2 is Account:{Name=chaitutwo}
acc2.Phone = '816-908-6506';
system.debug('acc2 after phone added'+acc2); //acc2 after phone addedAccount:{Name=chaitutwo, Phone=816-908-6506}
system.debug('accCon after phone added '+accCon); //accCon after phone added Account:{Name=chaitutwo, Phone=816-908-6506}

Account accClone = acc2.Clone();
system.debug('accClone is '+accClone); // accClone is Account:{Name=chaitutwo, Phone=816-908-6506}
accClone.Site = 'Hyderabad';
system.debug('accClone site added'+accClone); //|accClone site addedAccount:{Name=chaitutwo, Phone=816-908-6506, Site=Hyderabad}
system.debug('acc2 after site added'+acc2); // acc2 after site addedAccount:{Name=chaitutwo, Phone=816-908-6506}

That means if you dont use clone, the original record also get change. but if you want to keep original record as it is without effecting it then user Clone.
So clone is recommeded always.




Salesforce Object Query Language (SOQL): SOQL in salesforce (YOUTUBE)


string deletestring = 'TST'+'%';
list<Home_Page_Component__c> homepagelst = [SELECT ID,name,Label__c from Home_Page_Component__c
                                           WHERE Label__c LIKE :deletestring ALL ROWS];
system.debug('before for loop'+homepagelst.size());
undelete homepagelst;



Home_Page_Component__c hpc = new Home_Page_Component__c(Label__c='Parent one');
insert hpc;

Single Record:
account acc = new account(name='Hi sara');
insert acc;

single record with SObject:
sobject s = new account(name='hi sara2');
insert s;



Multiple Records on List:
Ex1: 
// creating one single account(sObject)
account acc = new account();
acc.name = 'demo1';
acc.AccountNumber = '100x1';
insert acc;

// creating one single account(sObject) in another way
account acc2 = new account(name='demo2',AccountNumber='100x2');
insert acc2;

// creating list of accounts at a time by constructor into list variable
list<account>mulacc = new list<account>{new account(name='demo3',AccountNumber='x003'),new account(name='demo4',AccountNumber='x004')};
insert mulacc;

//if you want to add list of variable to another list then we pass variable inside ()
list<account> newlist= new list<account>(mulacc);
system.debug('new list is '+newlist)

//if you want to add list of variable to another list by AddAll method first approach
list<account> newlisttwo = new list<account>();
newlisttwo.addAll(mulacc);
system.debug('new list two '+newlisttwo);


//if you want to add list of sObjects directly to another list by AddAll method first approach
list<account> newlisthree = new list<account>();
newlisthree.addAll(new list<account>{new account(name='demo1',AccountNumber='x003'),new account(name='demo2',AccountNumber='x004')});
system.debug('new list three '+newlisthree);

// creating a sObject single record to a list variable by using add method
list<JJ_Zip_to_Terr__c> ziptoter = new list<JJ_Zip_to_Terr__c>();
ziptoter.add(new JJ_Zip_to_Terr__c(Zip_Code__c='54535',Territory_Name__c='115-32-6200205'));
insert ziptoter;


//creating list of records to list variable by using list.Add all method
list<sObject>acc = new list<sObject>();
acc.addAll([select id from account limit 10]);
acc.addAll([select id from JJ_Zip_to_Terr__c limit 11]);
system.debug('total records are'+acc.size());

// creating list of accounts at a time by using for loop
list<account>foracc = new list<account>();
for(account acc:[select id,name,phone from account limit 2]){
    system.debug('acc is'+acc);
    foracc.add(acc);
}
system.debug('foracc list is '+foracc);

// read a specific field data from single sObject

string recordtypname = [select id,name from recordtype where id ='0120B0000001tTlQAI' limit 1].Name;
system.debug('chaitu name'+recordtypname);

// Read a specific field data from list 
list<string> strphone = new list<string>();
for(account acc : [select id,name,phone from account limit 2]){
    system.debug('account is'+acc);
    strphone.add(acc.phone);
}
system.debug('strphone is'+strphone);

// Read a one record from list and Read one field from sObject
list<account> acclist = new list<account>();
acclist.add(new account(name='list acc one name',site='hyderabad'));
acclist.add(acc);
system.debug('acclist is '+acclist);

account retrieveone = acclist.get(0);
system.debug('retrieveone is'+retrieveone);
account retrievetwo = acclist[1];
system.debug('retrievetwo is'+retrievetwo);
string siteone = (string)retrieveone.get('site');
system.debug('siteone is'+siteone);


// adding account one by one to update to list of account variable
list<account> updatelist = new list<account>();
for(account acc: [select id,name from account limit 3]){
    system.debug('single acc is'+acc);
    acc.phone='(816)908-6506';
    updatelist.add(acc);
}
update updatelist;






//Dynamic soql for one single sObject with database.Query
string one = 'select id,name from account limit 1';
sObject sobj = database.query(one);
system.debug(sobj);

//Dynamic soql for list variable with database.Query
string listsobj = 'select id,name,phone from account limit 3';
list<account> acclist = database.query(listsobj);
system.debug('acclist is'+acclist);

//Dynamic soql for list variable with database.Query
string listsobj = 'select id,name,phone from account ';
string month = 'july';
integer soqlrecords = 3;
listsobj +='where name like \'%' + month + '%\' AND';
listsobj += ' Industry IN (\'Banking\',\'Chemicals\')';
listsobj += ' ORDER BY name DESC';
listsobj += ' LIMIT'+''+': soqlrecords';
list<account> acclist = database.query(listsobj);
system.debug('acclist is'+acclist);

//Dynamic soql with string varible 
string orgocode = '105-34';
string speci = 'Oncology â€“ Multiple Myeloma';
string objOrgToSpeciality = 
                    'SELECT Id,Org_Code__c '+
                    'FROM JJ_Org_to_Specialty__c '+
                    'WHERE Specialty__c =  \'' +  speci+ '\' AND Active__c = TRUE AND Org_Code__c = \'' +  orgocode+ '\'';
system.debug('org chitu'+database.query(objOrgToSpeciality));

//Databse.countquery for dynamic count of records
integer total = database.countQuery('select count() from account');
system.debug('total is '+total);

Ex2 : list<Home_Page_Component_Child__c> hmpchildlst = new list<Home_Page_Component_Child__c>{
    new Home_Page_Component_Child__c(Home_Page_Component__c= hpc.id,Description__c = 'descption of one three'),
    new Home_Page_Component_Child__c(Home_Page_Component__c= hpc.id,Description__c = 'descption of one four')};
Home_Page_Component_Child__c hione = new Home_Page_Component_Child__c();
hione.Home_Page_Component__c = hpc.id;
hione.Description__c = 'descption of one one';
hione.Is_It_Completed__c= true;
hmpchildlst.add(hione);

Home_Page_Component_Child__c hione2 = new Home_Page_Component_Child__c();
//hione2.Home_Page_Component__c = hpc.id;
hione2.Description__c = 'descption of one two';
hione2.Is_It_Completed__c= false;
hmpchildlst.add(hione2);

database.saveResult[] results=database.insert(hmpchildlst,false);
system.debug('resutls are '+results);

for(database.saveResult re : results){
    if(re.isSuccess()){
        system.debug('record id is '+re.getId());
    }else
        for(Database.Error er: re.getErrors()){
            system.debug('the following eror has occured ');
            system.debug('the status code '+er.getStatusCode()+'eror message is'+er.getMessage());
            system.debug('the field of problem'+er.getFields());
        }
}


SOSL:
list<list<sObject>> soslresult = [FIND 'TST*' IN ALL FIELDS RETURNING Home_Page_Component__c(ID,Label__c)];
system.debug('sosl resutls are '+soslresult);

DEBUGS SCAN

list<Home_Page_Component__c> soqlresultall = [SELECT ID,Label__c FROM Home_Page_Component__c limit 1];
try{
    Home_Page_Component__c singlesoql=soqlresultall[0];
     system.debug('single record here is '+singlesoql);//|DEBUG|single record here is Home_Page_Component__c:{Id=a044W00000lHJQRQA4, Label__c=TST1}
}catch(exception e){
    system.debug('exceptio is here '+e);
}

map<Id,Home_Page_Component__c> maphompepage = new map<Id,Home_Page_Component__c>([SELECT ID,Label__c FROM Home_Page_Component__c limit 1]);
system.debug('map results only one '+maphompepage);//|DEBUG|map results are {a044W00000lHJQRQA4=Home_Page_Component__c:{Id=a044W00000lHJQRQA4, Label__c=TST1}}

list<Home_Page_Component__c> soqlresult = [SELECT ID,Label__c FROM Home_Page_Component__c];
system.debug('soql result is '+soqlresult);//|DEBUG|soql result is (Home_Page_Component__c:{Id=a044W00000lHJQRQA4, Label__c=TST1}, Home_Page_Component__c:{Id=a044W00000lHJQSQA4, Label__c=TST2}, Home_Page_Component__c:{Id=a044W00000lHw0rQAC, Label__c=Parent one}, Home_Page_Component__c:{Id=a044W00000iBQcaQAG, Label__c=TST3}, Home_Page_Component__c:{Id=a044W00000iBQZeQAO, Label__c=TST4})

map<Id,Home_Page_Component__c> maphompepage2 = new map<Id,Home_Page_Component__c>([SELECT ID,Label__c FROM Home_Page_Component__c limit 2]);
system.debug('map results more than one '+maphompepage2);//{a044W00000lHJQRQA4=Home_Page_Component__c:{Id=a044W00000lHJQRQA4, Label__c=TST1}, a044W00000lHJQSQA4=Home_Page_Component__c:{Id=a044W00000lHJQSQA4, Label__c=TST2}}

list<list<sObject>> soslresult = [FIND 'Tst*' IN ALL FIELDS RETURNING Home_Page_Component__c(ID,Label__c),
                                  Home_Page_Component_Child__c(Id,Description__c)];
system.debug('sosl resutls are '+soslresult);
/*DEBUG|sosl resutls are ((Home_Page_Component__c:{Id=a044W00000iBQZeQAO, Label__c=TST4}, 
                         Home_Page_Component__c:{Id=a044W00000lHJQSQA4, Label__c=TST2}, 
						 Home_Page_Component__c:{Id=a044W00000lHJQRQA4, Label__c=TST1}, 
						 Home_Page_Component__c:{Id=a044W00000iBQcaQAG, Label__c=TST3}),
                        (Home_Page_Component_Child__c:{Id=a054W00000ik6xUQAQ, Description__c=descption of one one TST})
                        ) */
list<Home_Page_Component__c> onlyparent=(list<Home_Page_Component__c>)soslresult[0];
system.debug('only parent is'+onlyparent);
list<Home_Page_Component_Child__c> onlychild =(list<Home_Page_Component_Child__c>)soslresult[1];
system.debug('only child is'+onlychild);



// child to parent
list<contact> con = [SELECT ID,firstname,accountid,lastname,Account.Name,account.phone from contact limit 2];
system.debug('contact firsname name '+con[0].account.name);
for(contact cont: con){
    system.debug('contact account name '+cont.account.name);
    system.debug('contact firsname name '+cont.firstname);
}

// parent to child
list<account> acc = [SELECT ID,name,(SELECT ID,Firstname,Lastname from Contacts) from account limit 2];
for(account ac: acc){
    system.debug('account name '+ac.id);
    for(contact c:ac.contacts){
         system.debug('account contact name '+c.lastname);
    }
}


CONVERT MAP TO LIST AND SET EASYLY:

map<id,account> accMap = new map<id,account>([SELECT id,name FROM account limit 3]);
system.debug('accMap is '+accMap);



list<account> idLsttoSort = new list<account>(accMap.values());
system.debug('idLsttoSort is '+idLsttoSort);

set<id> setofIds = new set<id>(accMap.keyset());


EX 1)// using current user login id
user userdetails = [select id,name from user where id = :userinfo.getUserId()];
system.debug('user details are'+userdetails);

// using lookup field Id in where clause first approach
Account_Team_Member_vod__c actm = [select ID,Team_Member_vod__c, Account_Plan_vod__c, Plan_Access__c, Access_Level__c From Account_Team_Member_vod__c where Team_Member_vod__c = :userdetails.id limit 1];
system.debug('actm is'+actm);
// using lookup field ID in where clause second approach
Account_Team_Member_vod__c actm = [select ID,Team_Member_vod__c, Account_Plan_vod__r.ID, Plan_Access__c, Access_Level__c From Account_Team_Member_vod__c where Team_Member_vod__r.id =:userdetails.id limit 1];
system.debug('actm is'+actm);

EX 2)//In SOQL, Difference passing List of sObject in WHERE IN clause
// list of users
list<user> userdetails = [select id,name from user where profile.name='system administrator' LIMIT 200];
system.debug('user details are'+userdetails.size());


// using lookup field in where clause for list of users
list<Account_Team_Member_vod__c> actm = [select ID,Team_Member_vod__c, Account_Plan_vod__c, Plan_Access__c, Access_Level__c From Account_Team_Member_vod__c where Team_Member_vod__c IN :userdetails limit 1];
system.debug('actm is'+actm.size());


EX 3)
list<user> userdetails = [select id,name from user where profile.name='system administrator' LIMIT 200];
system.debug('user details are'+userdetails.size());


// using lookup field in where clause for list of users
list<Account_Team_Member_vod__c> actm = [select ID,Team_Member_vod__c, Account_Plan_vod__c, Plan_Access__c, Access_Level__c From Account_Team_Member_vod__c where Team_Member_vod__r.Id IN :userdetails];
system.debug('actm is'+actm.size());


EX 4)//In SOQL, Difference between passing list of id in WHERE IN clause
set<id>useridset = new set<id>();
// list of users
list<user> userdetails = [select id,name from user where profile.name='system administrator' LIMIT 200];
system.debug('user details are'+userdetails.size());

for(user userid: userdetails){
    useridset.add(userid.id);
}

// using lookup field in where clause for list of users
list<Account_Team_Member_vod__c> actm = [select ID,Team_Member_vod__c, Account_Plan_vod__c, Plan_Access__c, Access_Level__c From Account_Team_Member_vod__c where Team_Member_vod__c IN :useridset limit 1];
system.debug('actm is'+actm.size());



//sObject

list<sObject> sobjlist = new list<sObject>();
sobjlist.addall([select id,phone from account limit 2]);
list<sObject> conlist = [select id,lastname from contact limit 2];
sobjlist.addall(conlist);
system.debug('sobject values are '+sobjlist);

list<contact> retrivedones = (list<sObject>)conlist;
system.debug('retrived is '+retrivedones);

